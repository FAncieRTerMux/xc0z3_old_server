local PlaceId = 126884695634066
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local ReGui = require(game.ReplicatedStorage.ReGui) -- Ensure ReGui is in ReplicatedStorage
ReGui:Init()

-- Define the modern red and black theme
ReGui:DefineTheme("CrimsonBlade", {
	TitleAlign = Enum.TextXAlignment.Center,
	TextDisabled = Color3.fromRGB(80, 80, 80),
	Text = Color3.fromRGB(255, 0, 0), -- Bright Red
	
	FrameBg = Color3.fromRGB(15, 15, 15),
	FrameBgTransparency = 0.3,
	FrameBgActive = Color3.fromRGB(50, 0, 0), -- Darker Red for active/hover
	FrameBgTransparencyActive = 0.2,
	
	CheckMark = Color3.fromRGB(255, 0, 0),
	SliderGrab = Color3.fromRGB(255, 0, 0),
	ButtonsBg = Color3.fromRGB(200, 0, 0), -- Standard button red
	CollapsingHeaderBg = Color3.fromRGB(200, 0, 0),
	CollapsingHeaderText = Color3.fromRGB(255, 255, 255),
	RadioButtonHoveredBg = Color3.fromRGB(255, 50, 50),
	
	WindowBg = Color3.fromRGB(25, 25, 25),
	TitleBarBg = Color3.fromRGB(35, 35, 35),
	TitleBarBgActive = Color3.fromRGB(50, 0, 0),
	
	Border = Color3.fromRGB(60, 60, 60),
	ResizeGrab = Color3.fromRGB(255, 0, 0),
	RegionBgTransparency = 0.1,
})

local DEFAULT_MIN_OLD_VERSION = 1224
local DEFAULT_MAX_OLD_VERSION = 1237
local EASTER_SHOP_ASSET_ID = "1234567890" -- Placeholder: REPLACE WITH ACTUAL EASTER SHOP MODEL/ASSET ID IF APPLICABLE

local SOUND_CLICK = 12759902633
local SOUND_FOUND = 13580554160

local AutoRetryEnabled = false
local IsScanning = false
local LastScanTime = 0
local ScanCooldown = 10

local currentMinFilter = DEFAULT_MIN_OLD_VERSION
local currentMaxFilter = DEFAULT_MAX_OLD_VERSION

local currentVersionLabelRef = nil
local playerCountLabelRef = nil
local jobIDLabelRef = nil
local totalOldServersLabelRef = nil
local autoRetryToggleRef = nil

if game.PlaceId ~= PlaceId then
    warn("XC0Z3 Old Server Finder: Wrong Game! This script is for Grow A Garden only.")
    -- Use ReGui for a notification since it's now the primary GUI framework
    ReGui:PopupModal({
        Title = "Error",
        AutoSize = "Y",
        Position = UDim2.new(0.5, 0, 0.5, 0),
    }):Center():Label({
        Text = "Wrong Game! This script is for Grow A Garden only.",
        TextColor = Color3.fromRGB(255, 50, 50),
        TextWrapped = true,
    }):Button({
        Text = "Close",
        Callback = function(self) self:ClosePopup() end
    })
    return
end

local function playSound(soundId)
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://" .. soundId
    sound.Parent = workspace
    sound.Volume = 0.5
    sound:Play()
    sound.Ended:Connect(function()
        sound:Destroy()
    end)
end

local function showNotification(message, isError)
    ReGui:PopupModal({
        Title = isError and "Error" or "Notification",
        AutoSize = "Y",
        Position = UDim2.new(0.5, 0, 0.1, 0), -- Position near top
    }):Center():Label({
        Text = message,
        TextColor = isError and Color3.fromRGB(255, 50, 50) or Color3.fromRGB(255, 255, 255), -- White text for normal, red for error
        TextWrapped = true,
    }):Button({
        Text = "Dismiss",
        Callback = function(self) self:ClosePopup() end
    })
end

local function showConfirmDialog(message, onConfirm)
    ReGui:PopupModal({
        Title = "Confirm Action",
        AutoSize = "Y",
        Position = UDim2.new(0.5, 0, 0.5, 0),
    }):Center():Label({
        Text = message,
        TextWrapped = true
    }):Separator():List({
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        FlexMode = Enum.UIFlexMode.Fill,
        HorizontalFlex = Enum.UIFlexAlignment.Fill,
        Spacing = 10,
    }):Button({
        Text = "Confirm",
        Callback = function(self)
            playSound(SOUND_CLICK)
            onConfirm()
            self.Parent.Parent:ClosePopup() -- Close the modal window
        end
    }):Button({
        Text = "Cancel",
        Callback = function(self)
            playSound(SOUND_CLICK)
            self.Parent.Parent:ClosePopup() -- Close the modal window
        end
    })
end

--// Main Window Setup
local Window = ReGui:Window({
	Title = "XC0Z3 Old Server Finder v20",
	Theme = "CrimsonBlade",
	NoClose = false, -- Allow closing
	Size = UDim2.new(0, 450, 0, 600), -- Slightly larger for more info/buttons
	CanResize = true,
}):Center()

-- Add the watermark directly to the window
Window:Label({
	Text = "Made by XC0Z3",
	TextColor = Color3.fromRGB(150, 150, 150),
	TextSize = 12,
	TextXAlignment = Enum.TextXAlignment.Left,
	Position = UDim2.new(0.01, 0, 0.01, 0),
})

local Group = Window:List({
	UiPadding = 2,
	HorizontalFlex = Enum.UIFlexAlignment.Fill,
})

local TabsBar = Group:List({
	Border = true,
	UiPadding = 5,
	BorderColor = Window:GetThemeKey("Border"),
	BorderThickness = 1,
	HorizontalFlex = Enum.UIFlexAlignment.Fill,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	AutomaticSize = Enum.AutomaticSize.X, -- Let X size automatically based on content
	FlexMode = Enum.UIFlexMode.Horizontal, -- Arrange tabs horizontally
	Spacing = 5,
	CornerRadius = UDim.new(0, 5)
})
local TabSelector = Group:TabSelector({
	NoTabsBar = true,
	Size = UDim2.fromScale(1, 1), -- Take full available space
})

local function CreateTab(Name: string, Icon)
	local Tab = TabSelector:CreateTab({
		Name = Name
	})

	local List = Tab:List({
		HorizontalFlex = Enum.UIFlexAlignment.Fill,
		UiPadding = 10,
		Spacing = 10
	})

	local Button = TabsBar:Image({
		Image = Icon,
		Ratio = 1,
		RatioAxis = Enum.DominantAxis.Width,
		Size = UDim2.new(0, 32, 0, 32), -- Fixed size for tab icons
		Callback = function(self)
			TabSelector:SetActiveTab(Tab)
			playSound(SOUND_CLICK)
		end,
	})

	ReGui:SetItemTooltip(Button, function(Canvas)
		Canvas:Label({
			Text = Name
		})
	end)

	return List
end

local function CreateRegion(Parent, Title)
	local Region = Parent:Region({
		Border = true,
		BorderColor = Window:GetThemeKey("Border"),
		BorderThickness = 1,
		CornerRadius = UDim.new(0, 5),
		HorizontalFlex = Enum.UIFlexAlignment.Fill,
	})

	Region:Label({
		Text = Title,
		TextXAlignment = Enum.TextXAlignment.Center,
		TextColor = Window:GetThemeKey("Text") -- Ensure title text color is correct
	})
	Region:Separator() -- Add a separator after the title

	return Region
end

local MainTab = CreateTab("Main", ReGui.Icons.Home)
local SettingsTab = CreateTab("Settings", ReGui.Icons.Settings)

--// Main Tab Content
local ServerInfoSection = CreateRegion(MainTab, "Current Server Info")
currentVersionLabelRef = ServerInfoSection:Label({
	Text = "Version: Loading...",
	TextXAlignment = Enum.TextXAlignment.Left,
	TextScaled = true,
})
playerCountLabelRef = ServerInfoSection:Label({
	Text = "Players: Loading...",
	TextXAlignment = Enum.TextXAlignment.Left,
	TextScaled = true,
})
jobIDLabelRef = ServerInfoSection:Label({
	Text = "Job ID: Loading...",
	TextXAlignment = Enum.TextXAlignment.Left,
	TextScaled = true,
})

ServerInfoSection:List({
    HorizontalFlex = Enum.UIFlexAlignment.Fill,
    FlexMode = Enum.UIFlexMode.Horizontal,
    Spacing = 5,
}):Button({
    Text = "üìã Copy Job ID",
    Callback = function()
        playSound(SOUND_CLICK)
        if game.JobId then
            local jobId = game.JobId
            pcall(function()
                LocalPlayer:GetMouse().Clipboard = jobId
            end)
            showNotification("Job ID copied: " .. jobId, false)
        else
            showNotification("Error: Current Job ID not available.", true)
        end
    end
}):Button({
    Text = "üìÑ Copy Version",
    Callback = function()
        playSound(SOUND_CLICK)
        local currentVersionText = currentVersionLabelRef.Text:gsub("Version: ", "")
        if currentVersionText ~= "" and currentVersionText ~= "N/A" then
            pcall(function()
                LocalPlayer:GetMouse().Clipboard = currentVersionText
            end)
            showNotification("Version copied: " .. currentVersionText, false)
        else
            showNotification("Error: Current Version not available.", true)
        end
    end
})

ServerInfoSection:Button({
	Text = "üîÑ Refresh Info",
	Callback = function()
		playSound(SOUND_CLICK)
		updateCurrentServerInfo()
		showNotification("Current server info refreshed.", false)
	end
})


local SearchFilterSection = CreateRegion(MainTab, "Search Filter (Versions)")
local minVersionInput = SearchFilterSection:TextBox({
	Label = "Min Version:",
	Default = tostring(DEFAULT_MIN_OLD_VERSION),
	Callback = function(self, text)
		local num = tonumber(text)
		if num then
			currentMinFilter = num
			showNotification("Min Version set to: " .. num, false)
		else
			self:SetText(tostring(currentMinFilter)) -- Revert on invalid input
			showNotification("Invalid Min Version. Keeping current.", true)
		end
	end,
})
local maxVersionInput = SearchFilterSection:TextBox({
	Label = "Max Version:",
	Default = tostring(DEFAULT_MAX_OLD_VERSION),
	Callback = function(self, text)
		local num = tonumber(text)
		if num then
			currentMaxFilter = num
			showNotification("Max Version set to: " .. num, false)
		else
			self:SetText(tostring(currentMaxFilter)) -- Revert on invalid input
			showNotification("Invalid Max Version. Keeping current.", true)
		end
	end,
})

local ActionsSection = CreateRegion(MainTab, "Actions")
ActionsSection:Button({
	Text = "üîç Find Matching Server",
	Callback = function()
		scanAndTeleport(false)
	end
})
totalOldServersLabelRef = ActionsSection:Label({
	Text = "Found: 0",
	TextXAlignment = Enum.TextXAlignment.Center,
	TextScaled = true,
})
ActionsSection:Button({
	Text = "üåê Check Server List (Console)",
	Callback = function()
		checkServerList()
	end
})
ActionsSection:Button({
	Text = "ü•ö Find Easter Shop",
	Callback = function()
		if EASTER_SHOP_ASSET_ID == "1234567890" then
            showNotification("EASTER_SHOP_ASSET_ID is a placeholder. Please update script with actual asset ID if possible.", true)
            return
        end
		scanAndTeleport(true)
	end
})
autoRetryToggleRef = ActionsSection:Checkbox({
	Label = "‚ôªÔ∏è Auto Retry",
	Value = AutoRetryEnabled,
	Callback = function(self, Value)
		AutoRetryEnabled = Value
		if AutoRetryEnabled then
            showNotification("Auto Retry Enabled!", false)
        else
            showNotification("Auto Retry Disabled!", false)
        end
	end
})

--// Settings Tab Content
local GuiControlSection = CreateRegion(SettingsTab, "GUI Controls")
GuiControlSection:Keybind({
	Label = "Toggle GUI Visibility",
	Value = Enum.KeyCode.RightShift,
	IgnoreGameProcessed = true,
	Callback = function(_, NewKeybind)
		Window:SetVisible(not Window.Visible)
	end,
})
GuiControlSection:Button({
	Text = "Unload Script",
	Callback = function()
		Window:Close()
		-- Also clean up any ongoing processes if necessary
	end
})

--// Core Functions (unchanged logic, adapted to ReGui callbacks)
local function updateCurrentServerInfo()
    local currentVersionText = "N/A"
    local currentJobId = "N/A"
    
    if game.PrivateServerInfo and game.PrivateServerInfo.version then
        currentVersionText = tostring(game.PrivateServerInfo.version)
    else
        local foundVersionLabel
        for _, v in pairs(game.CoreGui:GetDescendants()) do
            if v:IsA("TextLabel") and string.match(v.Text, "^v%d+$") then
                foundVersionLabel = v
                break
            end
        end
        if foundVersionLabel then
            local detectedVersion = tonumber(string.match(foundVersionLabel.Text, "%d+"))
            if detectedVersion then
                currentVersionText = tostring(detectedVersion)
            end
        end
    end
    currentVersionLabelRef:SetText("Version: " .. currentVersionText)
    playerCountLabelRef:SetText("Players: " .. tostring(Players.NumPlayers))
    if game.JobId then
        currentJobId = game.JobId
        local visiblePart = string.sub(currentJobId, 1, math.min(string.len(currentJobId), 10))
        jobIDLabelRef:SetText("Job ID: " .. visiblePart .. "...")
    else
        jobIDLabelRef:SetText("Job ID: N/A")
    end
end

local function isCurrentServerMatchingFilter()
    local serverVersion = nil
    if game.PrivateServerInfo and game.PrivateServerInfo.version then
        serverVersion = tonumber(game.PrivateServerInfo.version)
    else
        local foundVersionLabel
        for _, v in pairs(game.CoreGui:GetDescendants()) do
            if v:IsA("TextLabel") and string.match(v.Text, "^v%d+$") then
                foundVersionLabel = v
                break
            end
        end
        if foundVersionLabel then
            serverVersion = tonumber(string.match(foundVersionLabel.Text, "%d+"))
        end
    end
    return serverVersion and serverVersion >= currentMinFilter and serverVersion <= currentMaxFilter
end

local function checkEasterShop(jobId)
    -- As previously stated, direct client-side detection of assets loaded
    -- on other server instances is generally not possible.
    -- This remains a placeholder for demonstration purposes.
    if EASTER_SHOP_ASSET_ID ~= "1234567890" then
        -- Assume detection if ID is provided for script functionality demo
        return true 
    end
    return false
end

local function scanAndTeleport(searchEasterShop)
    if IsScanning then
        showNotification("Already scanning servers. Please wait.", false)
        return
    end
    IsScanning = true
    showNotification("Searching for " .. (searchEasterShop and "Easter Shop" or "filtered") .. " servers...", false)
    totalOldServersLabelRef:SetText("Found: Scanning...")

    local foundTargetServers = {}
    local cursor = ""
    local pageCount = 0
    local maxPagesToScan = 10 -- Limit to 10 pages for performance

    task.spawn(function()
        while pageCount < maxPagesToScan do
            local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=2&limit=100"
            if cursor ~= "" then
                url = url .. "&cursor=" .. cursor
            end

            local success, response = pcall(function()
                return HttpService:JSONDecode(HttpService:GetAsync(url))
            end)

            if success and response and response.data then
                for _, server in ipairs(response.data) do
                    local serverVersion = tonumber(server.version)
                    local matchesVersion = serverVersion and serverVersion >= currentMinFilter and serverVersion <= currentMaxFilter
                    local hasEasterShop = false

                    if searchEasterShop then
                        hasEasterShop = checkEasterShop(server.id)
                    end

                    if (not searchEasterShop and matchesVersion) or (searchEasterShop and hasEasterShop) then
                        table.insert(foundTargetServers, server)
                    end
                end
                cursor = response.nextPageCursor
                pageCount = pageCount + 1
                if not cursor then
                    break
                end
            else
                warn("XC0Z3 Server Finder: Failed to fetch server list or decode JSON. Error: " .. tostring(response))
                showNotification("Error: Could not fetch server list. Check console for details.", true)
                break
            end
        end

        IsScanning = false
        LastScanTime = tick()
        totalOldServersLabelRef:SetText("Found: " .. #foundTargetServers)

        if #foundTargetServers > 0 then
            local teleportMessage = searchEasterShop and "Easter Shop server found!" or "Matching server found!"
            showNotification("Found " .. #foundTargetServers .. " " .. (searchEasterShop and "Easter Shop" or "matching") .. " servers!", false)
            playSound(SOUND_FOUND)
            local targetServer = foundTargetServers[1]
            
            if not searchEasterShop and isCurrentServerMatchingFilter() and game.JobId == targetServer.id then
                showNotification("Already in a matching server. No teleport needed.", false)
                return
            end

            showConfirmDialog(teleportMessage .. "\nVersion: " .. targetServer.version .. "\nPlayers: " .. targetServer.players .. "\nJob ID: " .. string.sub(targetServer.id, 1, 10) .. "...\nTeleport now?", function()
                TeleportService:TeleportToPlaceInstance(PlaceId, targetServer.id)
            end)
        else
            local notFoundMessage = searchEasterShop and "No Easter Shop servers found." or "No servers found in range " .. currentMinFilter .. "-" .. currentMaxFilter .. "."
            showNotification(notFoundMessage, true)
        end
    end)
end

local function checkServerList()
    playSound(SOUND_CLICK)
    if IsScanning then
        showNotification("Already scanning servers. Please wait.", false)
        return
    end
    IsScanning = true
    showNotification("Checking server list in console...", false)
    print("\n--- XC0Z3 Server List Check --- github.com/XC0Z3/ServerFinder ---\n")
    local cursor = ""
    local pageCount = 0
    local serversFoundCount = 0
    local maxPagesToScan = 10

    task.spawn(function()
        while pageCount < maxPagesToScan do
            local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=2&limit=100"
            if cursor ~= "" then
                url = url .. "&cursor=" .. cursor
            end

            local success, response = pcall(function()
                return HttpService:JSONDecode(HttpService:GetAsync(url))
            end)

            if success and response and response.data then
                for _, server in ipairs(response.data) do
                    local serverVersion = tonumber(server.version)
                    local versionStatus = (serverVersion and serverVersion >= currentMinFilter and serverVersion <= currentMaxFilter) and "[MATCHING]" or "[NEW]"
                    
                    local hasEasterShop = false
                    if EASTER_SHOP_ASSET_ID ~= "1234567890" then
                        hasEasterShop = checkEasterShop(server.id)
                    end
                    local easterShopStatus = hasEasterShop and " (EASTER SHOP DETECTED)" or ""
                    
                    print(string.format("  %s Job ID: %s | Version: %s | Players: %d/%d%s", versionStatus, server.id, server.version, server.players, server.maxPlayers, easterShopStatus))
                    if versionStatus == "[MATCHING]" or easterShopStatus ~= "" then
                        serversFoundCount = serversFoundCount + 1
                    end
                end
                cursor = response.nextPageCursor
                pageCount = pageCount + 1
                if not cursor then
                    break
                end
            else
                warn("XC0Z3 Server Finder: Failed to fetch server list or decode JSON for console check. Error: " .. tostring(response))
                print("--- End of Server List Check (Error) ---")
                break
            end
        end
        IsScanning = false
        print("\n--- End of Server List Check. Found " .. serversFoundCount .. " relevant servers. ---")
        showNotification("Server list printed to console. Found " .. serversFoundCount .. " relevant servers.", false)
    end)
end

-- Initial update and auto-retry loop
RunService.Stepped:Connect(function(time, deltaTime)
    if AutoRetryEnabled and not IsScanning and (tick() - LastScanTime) >= ScanCooldown then
        scanAndTeleport(false)
    end
end)

-- Initial update of server info when GUI loads
updateCurrentServerInfo()
Window.Visible = true -- Ensure the window is visible on load
print("XC0Z3 Old Server Finder v20")
